topics cover : Basic SQL Statements, SQL Comments, SQL Injection

Basic SQL Statements
SELECT: Used to retrieve data from a database table.

SELECT * FROM users;
SELECT name, email FROM users WHERE id = 1;

INSERT: insert new data into database
INSERT INTO users (name, email, password) VALUES ('John Doe', 'john@example.com', 'password123');

UPDATE : use to MODIFY existing data
UPDATE users SET email = 'newemail@example.com' WHERE id = 1;

DELETE: use to remmve data from the Database
DELETE FROM users WHERE id = 1;

create : use to create new database table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);

SQL Comments
SQL comments are used to add explanatory notes or disable parts of SQL code. There are two types of SQL comments:
Single-line comments: Start with -- and continue to the end of the line.
Example:
-- This is a single-line comment
SELECT * FROM users; -- This is another single-line comment

Multi-line comments: Start with /* and end with */.
/*
This is a
multi-line
comment.
*/
SELECT * FROM users;

SQL Injection
SQL injection is a technique used to exploit vulnerabilities in applications that use SQL to interact with databases. Attackers can insert malicious SQL code into application input fields to gain unauthorized access to the database or perform other malicious actions.
Example of SQL injection vulnerability:
$username = $_GET['username'];
$password = $_GET['password'];
$query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
$result = $db->query($query);
In this example, if a user enters ' OR '1'='1 as the username and password, the resulting SQL query would be:
SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '' OR '1'='1'

This query would return all rows from the users table, effectively bypassing the authentication process.
To prevent SQL injection, it's important to properly sanitize and validate all user input before using it in SQL queries. This can be done using prepared statements or parameterized queries, which separate the SQL code from the user input.
Example of using prepared statements to prevent SQL injection:
$stmt = $db->prepare("SELECT * FROM users WHERE username = ? AND password = ?");
$stmt->bind_param("ss", $username, $password);
$stmt->execute();
$result = $stmt->get_result();